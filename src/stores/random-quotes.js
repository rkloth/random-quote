import { ArtStyles } from '@constants/art-styles';
import { useImageStore } from '@stores/images';
import { useQuoteStore } from '@stores/quotes';
import { useTagStore } from '@stores/tags';
import { sample } from 'lodash';

import { create } from 'zustand';

const useRandomQuotesStore = create((set, get) => ({
  randomQuotes: [],
  selectedIndex: null,

  isCreating: false,

  select: selectedIndex => {
    set({ selectedIndex });
  },

  previous: () => {
    const length = get().randomQuotes.length;
    const selectedIndex = get().selectedIndex;

    set({ selectedIndex: (selectedIndex - 1 + length) % length });
  },

  next: () => {
    const length = get().randomQuotes.length;
    const selectedIndex = get().selectedIndex;

    set({ selectedIndex: (selectedIndex + 1) % length });
  },

  create: async () => {
    set({ isCreating: true });

    const filteredTags = useTagStore
      .getState()
      .tags.filter(t => t.quoteCount && !t.slug.includes('-quotes'));
    const tag = sample(filteredTags);

    const artStyle = sample(ArtStyles);

    try {
      const [quote, image] = await Promise.all([
        useQuoteStore.getState().fetchRandomQuote(tag.slug),
        useImageStore
          .getState()
          .generateImage(
            `paint the concept of ${tag.slug} in the painting style of ${artStyle}.`
          ),
      ]);

      set(state => ({
        randomQuotes: [
          ...state.randomQuotes,
          {
            quoteId: quote._id,
            imageId: image.id,
            tag,
            artStyle,
            originalIndex: state.randomQuotes.length,
          },
        ],
        selectedIndex: state.randomQuotes.length,
        isCreating: false,
      }));
    } catch (e) {
      // error is always NSWF content generated by AI,
      // so we just try again for now
      get().create();
    }
  },
}));

export { useRandomQuotesStore };
